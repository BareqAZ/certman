CONF="
[ ca ]
# 'man ca'
default_ca = CA_default

[ CA_default ]
# Directory and file locations.
dir               = $HOME/.config/certman
certs             = $DIR/certs
crl_dir           = $DIR/crl
new_certs_dir     = $DIR/newcerts
database          = $DIR/index
serial            = $DIR/serial
RANDFILE          = $DIR/private/.rand

# The root key and root certificate.
private_key       = $DIR/private/ROOTCA.key
certificate       = $DIR/certs/ROOTCA.pem

# For certificate revocation lists.
crlnumber         = $DIR/crlnumber
crl               = $DIR/crl/ROOTCA.crl.pem
crl_extensions    = crl_ext
default_crl_days  = 30

# SHA-1 is deprecated, so use SHA-2 instead.
default_md        = sha256

name_opt          = ca_default
cert_opt          = ca_default
default_days      = 375
preserve          = no
policy            = $POLICY

[ policy_strict ]
# The root CA signing policy.
# See the POLICY FORMAT section of 'man ca'.
countryName             = optional
stateOrProvinceName     = optional
organizationName        = optional
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

[ policy_loose ]
# The intermediate CA signing policy.
# See the POLICY FORMAT section of the 'ca' man page.
countryName             = optional
stateOrProvinceName     = optional
localityName            = optional
organizationName        = optional
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

[ req ]
# Options for the 'req' tool ('man req').
default_bits        = 4096
distinguished_name  = req_distinguished_name
string_mask         = utf8only
prompt = no

# SHA-1 is deprecated, so use SHA-2 instead.
default_md          = sha256

# Extension to add when the -x509 option is used.
x509_extensions     = v3_ca

[ req_distinguished_name ]
# See <https://en.wikipedia.org/wiki/Certificate_signing_request>.
countryName                     = $CONF_C
stateOrProvinceName             = $CONF_ST 
localityName                    = $CONF_L
0.organizationName              = $CONF_O
organizationalUnitName          = $CONF_OU
commonName                      = $CONF_CN
emailAddress                    = $CONF_EMAIL

[ v3_ca ]
# Extensions for a typical CA ('man x509v3_config').
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical, CA:true
keyUsage = critical, digitalSignature, cRLSign, keyCertSign

[ v3_intermediate_ca ]
# Extensions for a typical intermediate CA ('man x509v3_config').
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical, CA:true, pathlen:0
keyUsage = critical, digitalSignature, cRLSign, keyCertSign

[ usr_cert ]
# Extensions for client certificates ('man x509v3_config').
basicConstraints = CA:FALSE
nsCertType = client, email
nsComment = 'OpenSSL Generated Client Certificate'
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer
keyUsage = critical, nonRepudiation, digitalSignature, keyEncipherment
extendedKeyUsage = clientAuth, emailProtection

[ server_cert ]
# Extensions for server certificates ('man x509v3_config').
basicConstraints = CA:FALSE
nsCertType = server
nsComment = 'OpenSSL Generated Server Certificate'
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer:always
keyUsage = critical, digitalSignature, keyEncipherment
extendedKeyUsage = serverAuth
#crlDistributionPoints =
#authorityInfoAccess =

[ crl_ext ]
# Extension for CRLs ('man x509v3_config').
authorityKeyIdentifier=keyid:always

[ ocsp ]
# Extension for OCSP signing certificates ('man ocsp').
basicConstraints = CA:FALSE
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer
keyUsage = critical, digitalSignature
extendedKeyUsage = critical, OCSPSigning
"

# Certificate signing request template.
CSR="
[ req ]
default_bits = $CERT_SIZE
distinguished_name = req_distinguished_name
req_extensions = req_ext
[ req_distinguished_name ]
countryName = $CERT_C
countryName_default = $CERT_C
stateOrProvinceName = $CERT_ST
stateOrProvinceName_default = $CERT_ST
localityName = $CERT_L
localityName_default = $CERT_L
organizationName = $CERT_O
organizationName_default = $CERT_O
organizationalUnitName = $CERT_OU
organizationalUnitName_default = $CERT_OU
commonName = *.$FQDN
commonName_max = 64
commonName_default = *.$FQDN
[ req_ext ]
subjectAltName = @alt_names
[alt_names]
DNS.1 = $FQDN
DNS.2 = *.$FQDN
DNS.3 = www.$FQDN
DNS.4 = www.*.$FQDN
"


# Certificate signing extensions.
EXT="
authorityKeyIdentifier=keyid,issuer    
basicConstraints=CA:FALSE    
keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
#crlDistributionPoints =
#authorityInfoAccess =
subjectAltName = @alt_names    

[alt_names]    
DNS.1 = $FQDN
DNS.2 = *.$FQDN
DNS.3 = www.$FQDN
DNS.4 = www.*.$FQDN
"

# CRL reloading script.
CRL_RELOAD="#!/bin/bash
while :; do
echo \"Updating CRL.\"
openssl ca -config $DIR/ca/ca.conf -gencrl \
           -out $DIR/ca/crl/check.crl 2> /dev/null 
           cat $DIR/ca/crl/check.crl > /var/www/crl/check.crl || echo \"Error Unable to update CRL!\"
sleep $CRL_interval
done
"

# Certman CRL HTTP server.
NGINX_CONFIG="
# Certman CRL Nginx config.
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;
#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    keepalive_timeout  65;

    server {
        listen       $CRL_PORT;
        server_name  $FQDN;
        access_log  /var/log/crl_access.log;
        root   /var/www/crl;

    }
}

# Certman systemd unit config.
"
CRL_SYSTEMD="
[Unit]
Description=The Certman CRL HTTP service
Requires=nginx.service
After=syslog.target network-online.target remote-fs.target nss-lookup.target
Wants=network-online.target

[Service]
Type=simple
PIDFile=/run/certman.pid
ExecStart=$DIR/ca/scripts/crl_reload
PrivateTmp=true

[Install]
WantedBy=multi-user.target
"

# OCSP server systemd unit.
OCSP_SYSTEMD="
[Unit]
Description=The Certman OCSP service
After=syslog.target network-online.target remote-fs.target nss-lookup.target
Wants=network-online.target

[Service]
Type=simple
PIDFile=/run/certman_ocsp.pid
ExecStart=$DIR/ca/scripts/ocsp
PrivateTmp=true

[Install]
WantedBy=multi-user.target

# OCSP server script.
"
OCSP_SCRIPT="#!/bin/bash
echo \"Starting OpenSSL OCSP server\"
openssl ocsp -port $OCSP_PORT -text -ignore_err    \
        -index      $DIR/ca/index                  \
        -CA         $DIR/ca/certs/ca-chain.pem     \
        -rkey       $DIR/ca/private/ca.key         \
        -rsigner    $DIR/ca/certs/ca.pem           \
        -text | grep --line-buffered -oP \'OCSP Response Status:.*|Response Type:.*|Responder Id:.*|Cert Status:.*\'
"
